"""
Unit tests for the Vulnerability Analysis Module (Module 2)
"""
import os
import sys
import unittest
import pandas as pd
import numpy as np
from unittest.mock import patch, MagicMock

# Add the project root to the path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../../")))

from gfmf.vulnerability_analysis import VulnerabilityAnalysisModule


class TestVulnerabilityAnalysisModule(unittest.TestCase):
    """Test cases for the VulnerabilityAnalysisModule class."""

    def setUp(self):
        """Set up test fixtures before each test method."""
        self.va_module = VulnerabilityAnalysisModule()
        
        # Create mock data
        self.grid_data = pd.DataFrame({
            'component_id': [1, 2, 3, 4, 5],
            'type': ['line', 'transformer', 'bus', 'line', 'transformer'],
            'capacity': [100, 200, 300, 150, 250],
            'age': [5, 10, 15, 8, 12],
            'criticality': [0.8, 0.9, 0.7, 0.6, 0.85]
        })
        
        self.weather_data = pd.DataFrame({
            'date': ['2023-01-01', '2023-01-02', '2023-01-03'],
            'temperature': [10.5, 15.2, 12.8],
            'precipitation': [0, 10, 5],
            'humidity': [65, 80, 70],
            'wind_speed': [5, 15, 8],
            'extreme_weather': [0, 1, 0]
        })
        
        self.outage_data = pd.DataFrame({
            'component_id': [1, 2, 3, 1, 2],
            'start_time': ['2023-01-01 10:00', '2023-01-02 12:00', '2023-01-03 09:00', 
                           '2023-01-04 14:00', '2023-01-05 08:00'],
            'end_time': ['2023-01-01 15:00', '2023-01-02 18:00', '2023-01-03 11:00',
                         '2023-01-04 17:00', '2023-01-05 11:00'],
            'cause': ['weather', 'equipment failure', 'maintenance', 'weather', 'equipment failure'],
            'duration_hours': [5, 6, 2, 3, 3]
        })
        
        # Create aligned dataset
        self.aligned_data = pd.DataFrame({
            'component_id': [1, 2, 3, 4, 5] * 3,
            'date': ['2023-01-01'] * 5 + ['2023-01-02'] * 5 + ['2023-01-03'] * 5,
            'type': ['line', 'transformer', 'bus', 'line', 'transformer'] * 3,
            'capacity': [100, 200, 300, 150, 250] * 3,
            'age': [5, 10, 15, 8, 12] * 3,
            'criticality': [0.8, 0.9, 0.7, 0.6, 0.85] * 3,
            'temperature': [10.5] * 5 + [15.2] * 5 + [12.8] * 5,
            'precipitation': [0] * 5 + [10] * 5 + [5] * 5,
            'humidity': [65] * 5 + [80] * 5 + [70] * 5,
            'wind_speed': [5] * 5 + [15] * 5 + [8] * 5,
            'extreme_weather': [0] * 5 + [1] * 5 + [0] * 5,
            'outage_flag': [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]
        })

    def test_initialization(self):
        """Test that module initializes correctly."""
        self.assertIsNotNone(self.va_module)
        self.assertIsNotNone(self.va_module.config)

    def test_component_profiler_analyze(self):
        """Test component profiler analysis."""
        # Mock the ComponentProfiler.analyze method
        mock_result = pd.DataFrame({
            'component_id': range(1, 11),
            'vulnerability_score': np.random.uniform(0, 1, 10)
        })
        self.va_module.component_profiler.analyze = MagicMock(return_value=mock_result)
        
        # Call the analyze method
        result = self.va_module.component_profiler.analyze(
            self.grid_data, self.outage_data
        )
        
        # Verify results
        self.assertIsInstance(result, pd.DataFrame)
        self.assertIn('vulnerability_score', result.columns)
        self.assertEqual(len(result), 10)

    def test_environmental_modeler_analyze(self):
        """Test environmental threat modeler analysis."""
        # Mock the EnvironmentalThreatModeler.analyze method
        mock_result = {
            'high_temperature': {
                'threshold': 35.0,
                'risk_score': 0.8
            },
            'high_wind': {
                'threshold': 50.0,
                'risk_score': 0.7
            },
            'extreme_weather_risk': 0.75
        }
        self.va_module.environmental_modeler.analyze = MagicMock(return_value=mock_result)
        
        # Call the analyze method
        result = self.va_module.environmental_modeler.analyze(
            self.weather_data, self.outage_data
        )
        
        # Verify results
        self.assertIsInstance(result, dict)
        self.assertIn('extreme_weather_risk', result)
        self.assertIn('high_temperature', result)
        self.assertIn('high_wind', result)

    def test_correlation_analyzer_analyze(self):
        """Test correlation analyzer analysis."""
        # Create mock vulnerability scores
        vulnerability_scores = pd.DataFrame({
            'component_id': range(1, 11),
            'vulnerability_score': np.random.uniform(0, 1, 10)
        })
        
        # Create mock threat profiles
        threat_profiles = {
            'high_temperature': {'risk_score': 0.8},
            'high_wind': {'risk_score': 0.7},
        }
        
        # Mock the CorrelationAnalyzer.analyze method
        mock_result = {
            'pearson': pd.DataFrame({
                'variable': ['temperature', 'wind_speed', 'precipitation'],
                'correlation': [0.75, 0.62, 0.31]
            }),
            'spearman': pd.DataFrame({
                'variable': ['temperature', 'wind_speed', 'precipitation'],
                'correlation': [0.72, 0.59, 0.28]
            })
        }
        self.va_module.correlation_analyzer.analyze = MagicMock(return_value=mock_result)
        
        # Call the analyze method
        result = self.va_module.correlation_analyzer.analyze(
            vulnerability_scores, threat_profiles, self.weather_data, self.outage_data
        )
        
        # Verify results
        self.assertIsInstance(result, dict)
        self.assertIn('pearson', result)
        self.assertIn('spearman', result)

    def test_run_analysis(self):
        """Test the full vulnerability analysis pipeline."""
        # Mock the input data loading
        mock_input_data = {
            'grid_components': self.grid_data,
            'weather_history': self.weather_data,
            'outage_records': self.outage_data,
            'combined_dataset': self.aligned_data
        }
        with patch.object(self.va_module, 'load_input_data', return_value=mock_input_data):
            # Mock component profiler
            mock_vulnerability_scores = pd.DataFrame({
                'component_id': range(1, 11),
                'vulnerability_score': np.random.uniform(0, 1, 10)
            })
            self.va_module.component_profiler.analyze = MagicMock(return_value=mock_vulnerability_scores)
            
            # Mock environmental modeler
            mock_threat_profiles = {
                'high_temperature': {'risk_score': 0.8},
                'high_wind': {'risk_score': 0.7},
            }
            self.va_module.environmental_modeler.analyze = MagicMock(return_value=mock_threat_profiles)
            
            # Mock correlation analyzer
            mock_correlation_matrices = {
                'pearson': pd.DataFrame(),
                'spearman': pd.DataFrame()
            }
            self.va_module.correlation_analyzer.analyze = MagicMock(return_value=mock_correlation_matrices)
            
            # Run the full analysis
            result = self.va_module.run_analysis()
            
            # Verify results
            self.assertIsInstance(result, dict)
            self.assertIn('vulnerability_scores', result)
            self.assertIn('threat_profiles', result)
            self.assertIn('correlation_matrices', result)


if __name__ == '__main__':
    unittest.main()
